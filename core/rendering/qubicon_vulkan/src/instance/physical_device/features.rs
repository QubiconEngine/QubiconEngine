#[derive(Debug, Default, Clone, Copy, PartialEq, Eq)]
pub struct DeviceFeatures {
    pub robust_buffer_access: bool,
    pub full_draw_index_uint32: bool,
    pub image_cube_array: bool,
    pub independent_blend: bool,
    pub geometry_shader: bool,
    pub tessellation_shader: bool,
    pub sample_rate_shading: bool,
    pub dual_src_blend: bool,
    pub logic_op: bool,
    pub multi_draw_indirect: bool,
    pub draw_indirect_first_instance: bool,
    pub depth_clamp: bool,
    pub depth_bias_clamp: bool,
    pub fill_mode_non_solid: bool,
    pub depth_bounds: bool,
    pub wide_lines: bool,
    pub large_points: bool,
    pub alpha_to_one: bool,
    pub multi_viewport: bool,
    pub sampler_anisotropy: bool,
    pub texture_compression_etc2: bool,
    pub texture_compression_astc_ldr: bool,
    pub texture_compression_bc: bool,
    pub occlusion_query_precise: bool,
    pub pipeline_statistics_query: bool,
    pub vertex_pipeline_stores_and_atomics: bool,
    pub fragment_stores_and_atomics: bool,
    pub shader_tessellation_and_geometry_point_size: bool,
    // pub shader_image_gather_extended: bool,
    // pub shader_storage_image_extended_formats: bool,
    // pub shader_storage_image_multisample: bool,
    // pub shader_storage_image_read_without_format: bool,
    // pub shader_storage_image_write_without_format: bool,
    // pub shader_uniform_buffer_array_dynamic_indexing: bool,
    // pub shader_sampled_image_array_dynamic_indexing: bool,
    // pub shader_storage_buffer_array_dynamic_indexing: bool,
    // pub shader_storage_image_array_dynamic_indexing: bool,
    pub shader_clip_distance: bool,
    pub shader_cull_distance: bool,
    pub shader_float64: bool,
    pub shader_int64: bool,
    pub shader_int16: bool,
    // pub shader_resource_residency: bool,
    // pub shader_resource_min_lod: bool,
    // pub sparse_binding: bool,
    // pub sparse_residency_buffer: bool,
    // pub sparse_residency_image2_d: bool,
    // pub sparse_residency_image3_d: bool,
    // pub sparse_residency2_samples: bool,
    // pub sparse_residency4_samples: bool,
    // pub sparse_residency8_samples: bool,
    // pub sparse_residency16_samples: bool,
    // pub sparse_residency_aliased: bool,
    // pub variable_multisample_rate: bool,
    // pub inherited_queries: bool,
}

/// For internal use only
impl Into<DeviceFeatures> for ash::vk::PhysicalDeviceFeatures {
    fn into(self) -> DeviceFeatures {
        DeviceFeatures {
            robust_buffer_access: self.robust_buffer_access == 1,
            full_draw_index_uint32: self.full_draw_index_uint32 == 1,
            image_cube_array: self.image_cube_array == 1,
            independent_blend: self.independent_blend == 1,
            geometry_shader: self.geometry_shader == 1,
            tessellation_shader: self.tessellation_shader == 1,
            sample_rate_shading: self.sample_rate_shading == 1,
            dual_src_blend: self.dual_src_blend == 1,
            logic_op: self.logic_op == 1,
            multi_draw_indirect: self.multi_draw_indirect == 1,
            draw_indirect_first_instance: self.draw_indirect_first_instance == 1,
            depth_clamp: self.depth_clamp == 1,
            depth_bias_clamp: self.depth_bias_clamp == 1,
            fill_mode_non_solid: self.fill_mode_non_solid == 1,
            depth_bounds: self.depth_bounds == 1,
            wide_lines: self.wide_lines == 1,
            large_points: self.large_points == 1,
            alpha_to_one: self.alpha_to_one == 1,
            multi_viewport: self.multi_viewport == 1,
            sampler_anisotropy: self.sampler_anisotropy == 1,
            texture_compression_etc2: self.texture_compression_etc2 == 1,
            texture_compression_astc_ldr: self.texture_compression_astc_ldr == 1,
            texture_compression_bc: self.texture_compression_bc == 1,
            occlusion_query_precise: self.occlusion_query_precise == 1,
            pipeline_statistics_query: self.pipeline_statistics_query == 1,
            vertex_pipeline_stores_and_atomics: self.vertex_pipeline_stores_and_atomics == 1,
            fragment_stores_and_atomics: self.fragment_stores_and_atomics == 1,
            shader_tessellation_and_geometry_point_size: self.shader_tessellation_and_geometry_point_size == 1,
            // shader_image_gather_extended: bool,
            // shader_storage_image_extended_formats: bool,
            // shader_storage_image_multisample: bool,
            // shader_storage_image_read_without_format: bool,
            // shader_storage_image_write_without_format: bool,
            // shader_uniform_buffer_array_dynamic_indexing: bool,
            // shader_sampled_image_array_dynamic_indexing: bool,
            // shader_storage_buffer_array_dynamic_indexing: bool,
            // shader_storage_image_array_dynamic_indexing: bool,
            shader_clip_distance: self.shader_clip_distance == 1,
            shader_cull_distance: self.shader_cull_distance == 1,
            shader_float64: self.shader_float64 == 1,
            shader_int64: self.shader_int64 == 1,
            shader_int16: self.shader_int16 == 1,
            // shader_resource_residency: bool,
            // shader_resource_min_lod: bool,
            // sparse_binding: bool,
            // sparse_residency_buffer: bool,
            // sparse_residency_image2_d: bool,
            // sparse_residency_image3_d: bool,
            // sparse_residency2_samples: bool,
            // sparse_residency4_samples: bool,
            // sparse_residency8_samples: bool,
            // sparse_residency16_samples: bool,
            // sparse_residency_aliased: bool,
            // variable_multisample_rate: bool,
            // inherited_queries: bool,
        }
    }
}

/// For internal use only
impl Into<ash::vk::PhysicalDeviceFeatures> for DeviceFeatures {
    fn into(self) -> ash::vk::PhysicalDeviceFeatures {
        ash::vk::PhysicalDeviceFeatures {
            robust_buffer_access: self.robust_buffer_access as u32,
            full_draw_index_uint32: self.full_draw_index_uint32 as u32,
            image_cube_array: self.image_cube_array as u32,
            independent_blend: self.independent_blend as u32,
            geometry_shader: self.geometry_shader as u32,
            tessellation_shader: self.tessellation_shader as u32,
            sample_rate_shading: self.sample_rate_shading as u32,
            dual_src_blend: self.dual_src_blend as u32,
            logic_op: self.logic_op as u32,
            multi_draw_indirect: self.multi_draw_indirect as u32,
            draw_indirect_first_instance: self.draw_indirect_first_instance as u32,
            depth_clamp: self.depth_clamp as u32,
            depth_bias_clamp: self.depth_bias_clamp as u32,
            fill_mode_non_solid: self.fill_mode_non_solid as u32,
            depth_bounds: self.depth_bounds as u32,
            wide_lines: self.wide_lines as u32,
            large_points: self.large_points as u32,
            alpha_to_one: self.alpha_to_one as u32,
            multi_viewport: self.multi_viewport as u32,
            sampler_anisotropy: self.sampler_anisotropy as u32,
            texture_compression_etc2: self.texture_compression_etc2 as u32,
            texture_compression_astc_ldr: self.texture_compression_astc_ldr as u32,
            texture_compression_bc: self.texture_compression_bc as u32,
            occlusion_query_precise: self.occlusion_query_precise as u32,
            pipeline_statistics_query: self.pipeline_statistics_query as u32,
            vertex_pipeline_stores_and_atomics: self.vertex_pipeline_stores_and_atomics as u32,
            fragment_stores_and_atomics: self.fragment_stores_and_atomics as u32,
            shader_tessellation_and_geometry_point_size: self.shader_tessellation_and_geometry_point_size as u32,

            shader_clip_distance: self.shader_clip_distance as u32,
            shader_cull_distance: self.shader_cull_distance as u32,
            shader_float64: self.shader_float64 as u32,
            shader_int64: self.shader_int64 as u32,
            shader_int16: self.shader_int16 as u32,

            ..Default::default()
        }
    }
}